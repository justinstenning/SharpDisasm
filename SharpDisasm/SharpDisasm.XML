<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDisasm</name>
    </assembly>
    <members>
        <member name="T:SharpDisasm.ArchitectureMode">
            <summary>
            The CPU architecture mode
            </summary>
        </member>
        <member name="F:SharpDisasm.ArchitectureMode.x86_16">
            <summary>
            16-bit
            </summary>
        </member>
        <member name="F:SharpDisasm.ArchitectureMode.x86_32">
            <summary>
            32-bit
            </summary>
        </member>
        <member name="F:SharpDisasm.ArchitectureMode.x86_64">
            <summary>
            64-bit
            </summary>
        </member>
        <member name="T:SharpDisasm.Helpers.AssemblyCodeOffset">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDisasm.Helpers.IAssemblyCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpDisasm.Helpers.IAssemblyCode.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Byte"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:System.Byte"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:SharpDisasm.Helpers.IAssemblyCode.Length">
            <summary>
            Gets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="M:SharpDisasm.Helpers.AssemblyCodeOffset.#ctor(SharpDisasm.Helpers.IAssemblyCode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDisasm.Helpers.AssemblyCodeArray"/> class.
            </summary>
            <param name="code">The code.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="P:SharpDisasm.Helpers.AssemblyCodeOffset.SharpDisasm#Helpers#IAssemblyCode#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Byte"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:System.Byte"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:SharpDisasm.Helpers.AssemblyCodeOffset.SharpDisasm#Helpers#IAssemblyCode#Length">
            <summary>
            Gets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="T:SharpDisasm.Helpers.AssemblyCodeMemory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpDisasm.Helpers.AssemblyCodeMemory.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDisasm.Helpers.AssemblyCodeArray"/> class.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="length">The length.</param>
        </member>
        <member name="P:SharpDisasm.Helpers.AssemblyCodeMemory.SharpDisasm#Helpers#IAssemblyCode#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Byte"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:System.Byte"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:SharpDisasm.Helpers.AssemblyCodeMemory.SharpDisasm#Helpers#IAssemblyCode#Length">
            <summary>
            Gets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="T:SharpDisasm.Helpers.AssemblyCodeArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpDisasm.Helpers.AssemblyCodeArray.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDisasm.Helpers.AssemblyCodeArray"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="P:SharpDisasm.Helpers.AssemblyCodeArray.SharpDisasm#Helpers#IAssemblyCode#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Byte"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:System.Byte"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:SharpDisasm.Helpers.AssemblyCodeArray.SharpDisasm#Helpers#IAssemblyCode#Length">
            <summary>
            Gets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="T:SharpDisasm.Helpers.AssemblyCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpDisasm.Helpers.AssemblyCode.CopyToBytes(SharpDisasm.Helpers.IAssemblyCode,System.Int32,System.Int32)">
            <summary>
            Copies to bytes.
            </summary>
            <param name="source">The source.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDisasm.Helpers.AssemblyCode.Copy(SharpDisasm.Helpers.IAssemblyCode,System.Int32,System.Int32)">
            <summary>
            Copies the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="T:SharpDisasm.Translators.ATTTranslator">
            <summary>
            Translates to AT&amp;T syntax
            </summary>
        </member>
        <member name="T:SharpDisasm.Translators.Translator">
            <summary>
            All translators must inherit from the abstract class <see cref="T:SharpDisasm.Translators.Translator"/>. This base class provides a number of common methods, and defines two abstract methods that must be implemented.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:SharpDisasm.Translators.Translator.Content">
            <summary>
            The content being generated by the current call to the translator
            </summary>
        </member>
        <member name="F:SharpDisasm.Translators.Translator.Registers">
            <summary>
            A list of all registers names
            </summary>
        </member>
        <member name="M:SharpDisasm.Translators.Translator.Translate(System.Collections.Generic.IEnumerable{SharpDisasm.Instruction})">
            <summary>
            Abstract method to translate multiple instructions. Classes implementing this method must reset the protected <see cref="F:SharpDisasm.Translators.Translator.Content"/> member instance and cleanup.
            </summary>
            <param name="insns">Collection of instructions to be translated</param>
            <returns>The result of the translated instructions</returns>
        </member>
        <member name="M:SharpDisasm.Translators.Translator.Translate(SharpDisasm.Instruction)">
            <summary>
            Abstract method to translate a single instruction. Classes implementing this method must reset the protected <see cref="F:SharpDisasm.Translators.Translator.Content"/> member instance and cleanup.
            </summary>
            <param name="insn">The instruction to translate</param>
            <returns>The result of the single translated instruction</returns>
        </member>
        <member name="M:SharpDisasm.Translators.Translator.RegisterForType(SharpDisasm.Udis86.ud_type)">
            <summary>
            Converts a <see cref="T:SharpDisasm.Udis86.ud_type"/> into an index into <see cref="F:SharpDisasm.Translators.Translator.Registers"/> and returns the result.
            </summary>
            <param name="type">The register <see cref="T:SharpDisasm.Udis86.ud_type"/> to retrieve the corresponding string for. Note: only the UD_R_* types will result in a valid index.</param>
            <returns>The corresponding string value for the register.</returns>
        </member>
        <member name="M:SharpDisasm.Translators.Translator.WriteAddress(SharpDisasm.Instruction)">
            <summary>
            Writes the address of the instruction to <see cref="F:SharpDisasm.Translators.Translator.Content"/>. The width of the address is determined by the <see cref="T:SharpDisasm.ArchitectureMode"/> used during disassembly.
            </summary>
            <param name="insn">The instruction to append the address of.</param>
        </member>
        <member name="M:SharpDisasm.Translators.Translator.WriteBinary(SharpDisasm.Instruction)">
            <summary>
            Writes the instruction binary data to <see cref="F:SharpDisasm.Translators.Translator.Content"/>. The result is padded to 20 characters (supporting instructions up to 10-bytes long). If the instruction was disassembled without <see cref="F:SharpDisasm.Disassembler.CopyBinaryToInstruction"/> a blank 20 character string will be appended.
            </summary>
            <param name="insn">The instruction of which to append the binary data for</param>
        </member>
        <member name="M:SharpDisasm.Translators.Translator.ud_syn_rel_target(SharpDisasm.Instruction,SharpDisasm.Operand)">
            <summary>
            TODO: document and rename ported translator methods
            </summary>
            <param name="insn"></param>
            <param name="opr"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDisasm.Translators.Translator.ud_syn_print_addr(SharpDisasm.Instruction,System.Int64)">
            <summary>
            TODO: document and rename ported translator methods
            </summary>
            <param name="insn"></param>
            <param name="addr"></param>
        </member>
        <member name="M:SharpDisasm.Translators.Translator.ud_syn_print_imm(SharpDisasm.Instruction,SharpDisasm.Operand)">
            <summary>
            TODO: document and rename ported translator methods
            </summary>
            <param name="insn"></param>
            <param name="op"></param>
        </member>
        <member name="M:SharpDisasm.Translators.Translator.ud_syn_print_mem_disp(SharpDisasm.Instruction,SharpDisasm.Operand,System.Int32)">
            <summary>
            TODO: document and rename ported translator methods
            </summary>
            <param name="insn"></param>
            <param name="op"></param>
            <param name="sign"></param>
        </member>
        <member name="P:SharpDisasm.Translators.Translator.IncludeAddress">
            <summary>
            Indicates whether the generated output will include the instruction address
            </summary>
        </member>
        <member name="P:SharpDisasm.Translators.Translator.IncludeBinary">
            <summary>
            Indicates whether the generated output will include the original binary instruction
            </summary>
        </member>
        <member name="P:SharpDisasm.Translators.Translator.SymbolResolver">
            <summary>
            An optional symbol resolver <see cref="T:SharpDisasm.Translators.SymbolResolverDelegate"/>.
            </summary>
        </member>
        <member name="M:SharpDisasm.Translators.ATTTranslator.Translate(System.Collections.Generic.IEnumerable{SharpDisasm.Instruction})">
            <summary>
            Translate a list of instructions separated by <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="insns"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDisasm.Translators.ATTTranslator.Translate(SharpDisasm.Instruction)">
            <summary>
            Translate a single instruction
            </summary>
            <param name="insn"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDisasm.Translators.ATTTranslator.opr_cast(SharpDisasm.Instruction,SharpDisasm.Operand)">
            <summary>
            Prints an operand cast.
            </summary>
            <param name="insn"></param>
            <param name="op"></param>
        </member>
        <member name="M:SharpDisasm.Translators.ATTTranslator.gen_operand(SharpDisasm.Instruction,SharpDisasm.Operand)">
            <summary>
            Generates assembly output for each operand
            </summary>
            <param name="u"></param>
            <param name="op"></param>
        </member>
        <member name="M:SharpDisasm.Translators.ATTTranslator.ud_translate_att(SharpDisasm.Instruction)">
            <summary>
            Translates to AT&amp;T syntax 
            </summary>
            <param name="u"></param>
        </member>
        <member name="T:SharpDisasm.Translators.IntelTranslator">
            <summary>
            Translates instructions to Intel ASM syntax
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:SharpDisasm.Translators.IntelTranslator.Translate(System.Collections.Generic.IEnumerable{SharpDisasm.Instruction})">
            <summary>
            Translate a list of instructions separated by <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="insns">The instructions to translate</param>
            <returns>Each instruction as Intel ASM syntax separated by <see cref="P:System.Environment.NewLine"/></returns>
        </member>
        <member name="M:SharpDisasm.Translators.IntelTranslator.Translate(SharpDisasm.Instruction)">
            <summary>
            Translate a single instruction
            </summary>
            <param name="insn"></param>
            <returns></returns>
        </member>
        <member name="T:SharpDisasm.Translators.SymbolResolverDelegate">
            <summary>
            Allows an address to be resolved to a symbol name
            </summary>
            <param name="instruction">The instruction being translated</param>
            <param name="addr">The address to resolve to a symbol</param>
            <param name="offset">An optional offset for the symbol. E.g. if the symbol is located at 0x100 and <paramref name="addr"/> is 0x101, the offset can be set to 0x001 and the symbol can be output wiht an offset i.e. MYSYMBOL:0x001</param>
            <returns>If a symbol is located at the address return the symbol name, otherwise null or <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="T:SharpDisasm.Disassembler">
            <summary>
            Provides a simple wrapper around the C# ported udis86 library.
            </summary>
        </member>
        <member name="F:SharpDisasm.Disassembler.Address">
            <summary>
            The address
            </summary>
        </member>
        <member name="F:SharpDisasm.Disassembler.Architecture">
            <summary>
            The x86 CPU architecture to use: 16-bit, 32-bit or 64-bit.
            </summary>
        </member>
        <member name="F:SharpDisasm.Disassembler.CopyBinaryToInstruction">
            <summary>
            Copies the source binary to the decoded instructions. When true this option increases the memory required for each decoded instruction.
            </summary>
        </member>
        <member name="F:SharpDisasm.Disassembler.Vendor">
            <summary>
            Which vendor instructions to support for disassembly. Options are AMD, Intel or Any.
            </summary>
        </member>
        <member name="F:SharpDisasm.Disassembler._u">
            <summary>
            The udis86 ud structure used during disassembly.
            </summary>
        </member>
        <member name="F:SharpDisasm.Disassembler.Translator">
            <summary>
            The translator that will be used when calling <see cref="M:SharpDisasm.Instruction.ToString"/>.
            </summary>
        </member>
        <member name="M:SharpDisasm.Disassembler.#ctor(System.Byte[],SharpDisasm.ArchitectureMode,System.UInt64,System.Boolean,SharpDisasm.Vendor)">
            <summary>
            Prepares a new disassembler instance for the code provided. The instructions can then be disassembled with a call to <see cref="M:SharpDisasm.Disassembler.Disassemble"/>. The base address used to resolve relative addresses should be provided in <paramref name="address"/>.
            </summary>
            <param name="code">The code to be disassembled</param>
            <param name="architecture">The target x86 instruction set architecture of the code (e.g. 64-bit, 32-bit or 16-bit).</param>
            <param name="address">The address of the first byte of code. This value is used to resolve relative addresses into absolute addresses while disassembling.</param>
            <param name="copyBinaryToInstruction">Keeps a copy of the binary code for the instruction. This will increase the memory usage for each instruction. This is necessary if planning on using the <see cref="P:SharpDisasm.Translators.Translator.IncludeBinary"/> option.</param>
            <param name="vendor">What vendor instructions to support during disassembly, default is Any. Other options are AMD or Intel.</param>
        </member>
        <member name="M:SharpDisasm.Disassembler.#ctor(System.IntPtr,System.Int32,SharpDisasm.ArchitectureMode,System.UInt64,System.Boolean,SharpDisasm.Vendor)">
            <summary>
            Prepares a new disassembler instance for the code located at the memory address provided. The instructions can then be disassembled with a call to <see cref="M:SharpDisasm.Disassembler.Disassemble"/>. The base address used to resolve relative addresses should be provided in <paramref name="address"/>.
            </summary>
            <param name="codePtr">A pointer to memory to be disassembled.</param>
            <param name="codeLength">The maximum length to be disassembled.</param>
            <param name="architecture">The architecture of the code (e.g. 64-bit, 32-bit or 16-bit).</param>
            <param name="address">The address of the first byte of code. This value is used to resolve relative addresses into absolute addresses while disassembling.</param>
            <param name="copyBinaryToInstruction">Keeps a copy of the binary code for the instruction. This will increase the memory usage for each instruction. This is necessary if planning on using the <see cref="P:SharpDisasm.Translators.Translator.IncludeBinary"/> option.</param>
            <param name="vendor">What vendors to support for disassembly, default is Any. Other options are AMD or Intel.</param>
        </member>
        <member name="M:SharpDisasm.Disassembler.InitUdis86">
            <summary>
            (Re)Initialise the udis86 disassembler
            </summary>
        </member>
        <member name="M:SharpDisasm.Disassembler.Disassemble">
            <summary>
            Disassemble instructions and yield the result. Breaking out of the enumerator will prevent further instructions being disassembled.
            </summary>
            <returns>An IEnumerable collection of disassembled instructions</returns>
        </member>
        <member name="M:SharpDisasm.Disassembler.Reset">
            <summary>
            Reset to beginning of the buffer
            </summary>
        </member>
        <member name="M:SharpDisasm.Disassembler.NextInstruction">
            <summary>
            Decodes a single instruction and increments buffer position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDisasm.Disassembler.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SharpDisasm.Disassembler.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:SharpDisasm.Disassembler.BytesDecoded">
            <summary>
            The number of bytes successfully decoded into instructions. This excludes invalid instructions.
            </summary>
        </member>
        <member name="T:SharpDisasm.Instruction">
            <summary>
            Represents a decoded instruction.
            </summary>
        </member>
        <member name="F:SharpDisasm.Instruction.pfx_rex">
            <summary>
            Low-level decode information
            </summary>
        </member>
        <member name="F:SharpDisasm.Instruction.pfx_seg">
            <summary>
            Low-level decode information
            </summary>
        </member>
        <member name="F:SharpDisasm.Instruction.pfx_opr">
            <summary>
            Low-level decode information
            </summary>
        </member>
        <member name="F:SharpDisasm.Instruction.pfx_adr">
            <summary>
            Low-level decode information
            </summary>
        </member>
        <member name="F:SharpDisasm.Instruction.pfx_lock">
            <summary>
            Low-level decode information
            </summary>
        </member>
        <member name="F:SharpDisasm.Instruction.pfx_str">
            <summary>
            Low-level decode information
            </summary>
        </member>
        <member name="F:SharpDisasm.Instruction.pfx_rep">
            <summary>
            Low-level decode information
            </summary>
        </member>
        <member name="F:SharpDisasm.Instruction.pfx_repe">
            <summary>
            Low-level decode information
            </summary>
        </member>
        <member name="F:SharpDisasm.Instruction.pfx_repne">
            <summary>
            Low-level decode information
            </summary>
        </member>
        <member name="F:SharpDisasm.Instruction.opr_mode">
            <summary>
            The operand mode (16-,32-, or 64-bit), i.e. we could be reading a 16-bit value from a 32-bit address, in which case opr_mode would be 16, while adr_mode would be 32.
            </summary>
        </member>
        <member name="F:SharpDisasm.Instruction.adr_mode">
            <summary>
            The memory addressing mode of the instruction (16-,32-, or 64-bit)
            </summary>
        </member>
        <member name="F:SharpDisasm.Instruction.br_far">
            <summary>
            Low-level decode information
            </summary>
        </member>
        <member name="F:SharpDisasm.Instruction.br_near">
            <summary>
            Low-level decode information
            </summary>
        </member>
        <member name="F:SharpDisasm.Instruction.have_modrm">
            <summary>
            Low-level decode information
            </summary>
        </member>
        <member name="F:SharpDisasm.Instruction.modrm">
            <summary>
            Low-level decode information
            </summary>
        </member>
        <member name="F:SharpDisasm.Instruction.primary_opcode">
            <summary>
            Low-level decode information
            </summary>
        </member>
        <member name="F:SharpDisasm.Instruction.dis_mode">
            <summary>
            The instruction architecture as configured within the constructor of <see cref="T:SharpDisasm.Disassembler"/>
            </summary>
        </member>
        <member name="F:SharpDisasm.Instruction.itab_entry">
            <summary>
            The instruction table entry that applies to this instruction
            </summary>
        </member>
        <member name="M:SharpDisasm.Instruction.ToString">
            <summary>
            Output the instruction using the <see cref="T:SharpDisasm.Translators.Translator"/> assigned to <see cref="F:SharpDisasm.Disassembler.Translator"/>.
            </summary>
            <returns>The translated instruction (e.g. Intel ASM syntax)</returns>
        </member>
        <member name="P:SharpDisasm.Instruction.Offset">
            <summary>
            Instruction Offset
            </summary>
        </member>
        <member name="P:SharpDisasm.Instruction.PC">
            <summary>
            Program counter
            </summary>
        </member>
        <member name="P:SharpDisasm.Instruction.Bytes">
            <summary>
            Will contain a copy of the original binary instruction if <see cref="F:SharpDisasm.Disassembler.CopyBinaryToInstruction"/> is true.
            </summary>
        </member>
        <member name="P:SharpDisasm.Instruction.Mnemonic">
            <summary>
            Mnemonic
            </summary>
        </member>
        <member name="P:SharpDisasm.Instruction.Operands">
            <summary>
            The instruction operands (maximum 3)
            </summary>
        </member>
        <member name="P:SharpDisasm.Instruction.Length">
            <summary>
            The length of the instruction in bytes
            </summary>
        </member>
        <member name="P:SharpDisasm.Instruction.Error">
            <summary>
            Indicates whether the instruction was successfully decoded.
            </summary>
        </member>
        <member name="P:SharpDisasm.Instruction.ErrorMessage">
            <summary>
            The reason an instruction was not successfully decoded.
            </summary>
        </member>
        <member name="T:SharpDisasm.Operand">
            <summary>
            Represents an operand for an <see cref="T:SharpDisasm.Instruction"/>
            </summary>
        </member>
        <member name="M:SharpDisasm.Operand.ToString">
            <summary>
            Converts the key components of the operand to a string.
            </summary>
            <returns>The operand in string format suitable for diagnostics.</returns>
        </member>
        <member name="P:SharpDisasm.Operand.Value">
            <summary>
            The value of the memory displacement portion of the operand (if applicable) converted to Int64. See the Lval* properties for original value.
            </summary>
        </member>
        <member name="P:SharpDisasm.Operand.RawValue">
            <summary>
            <para>Returns the operand displacement value as its raw type (e.g. sbyte, byte, short, ushort, Int32, UInt32, long, ulong) depending on the operand type.</para>
            <para>If a memory operand, and no base/index registers, the result will be unsigned and contain <see cref="P:SharpDisasm.Operand.Offset"/> bits, otherwise if there is a base and/or index register the value is signed with <see cref="P:SharpDisasm.Operand.Offset"/> bits.</para>
            <para>If an immediate mode operand the value will be signed and the contain <see cref="P:SharpDisasm.Operand.Size"/> bits.</para>
            <para>Otherwise the result will be unsigned and if <see cref="P:SharpDisasm.Operand.Offset"/> is &gt; 0 will contain <see cref="P:SharpDisasm.Operand.Offset"/> bits otherwise <see cref="P:SharpDisasm.Operand.Size"/> bits.</para>
            </summary>
        </member>
        <member name="P:SharpDisasm.Operand.Opcode">
            <summary>
            The operand code
            </summary>
        </member>
        <member name="P:SharpDisasm.Operand.Type">
            <summary>
            The operand type (UD_OP_REG, UD_OP_MEM, UD_OP_PTR, UD_OP_IMM, UD_OP_JIMM, UD_OP_CONST)
            </summary>
        </member>
        <member name="P:SharpDisasm.Operand.Size">
            <summary>
            Size of the result of the operand
            </summary>
        </member>
        <member name="P:SharpDisasm.Operand.Base">
            <summary>
            Base register
            </summary>
        </member>
        <member name="P:SharpDisasm.Operand.Index">
            <summary>
            Index register
            </summary>
        </member>
        <member name="P:SharpDisasm.Operand.Scale">
            <summary>
            Scale applied to index register (2, 4, or 8). 0 == 1 == does nothing
            </summary>
        </member>
        <member name="P:SharpDisasm.Operand.Offset">
            <summary>
            For UD_OP_MEM operands, this represents the size of the memory displacement value (e.g. 8-, 16-, 32-, or 64- bits).
            This helps determine which "Lval*" value should be read (e.g. if Offset is 8 and operand type is UD_OP_MEM and Base register is not UD_NONE, read LvalSByte)
            </summary>
            <remarks>
            <see cref="P:SharpDisasm.Operand.RawValue"/> for more detail about the rules governing which value is read.
            </remarks>
        </member>
        <member name="P:SharpDisasm.Operand.PtrSegment">
            <summary>
            Segment component of PTR operand
            </summary>
        </member>
        <member name="P:SharpDisasm.Operand.PtrOffset">
            <summary>
            Offset component of PTR operand
            </summary>
        </member>
        <member name="P:SharpDisasm.Operand.LvalSByte">
            <summary>
            The displacement value as <see cref="T:System.SByte"/>
            </summary>
        </member>
        <member name="P:SharpDisasm.Operand.LvalByte">
            <summary>
            The displacement value as <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="P:SharpDisasm.Operand.LvalSWord">
            <summary>
            The displacement value as <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="P:SharpDisasm.Operand.LvalUWord">
            <summary>
            The displacement value as <see cref="T:System.UInt16"/>
            </summary>
        </member>
        <member name="P:SharpDisasm.Operand.LvalSDWord">
            <summary>
            The displacement value as <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="P:SharpDisasm.Operand.LvalUDWord">
            <summary>
            The displacement value as <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="P:SharpDisasm.Operand.LvalSQWord">
            <summary>
            The displacement value as <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="P:SharpDisasm.Operand.LvalUQWord">
            <summary>
            The displacement value as <see cref="T:System.UInt64"/>
            </summary>
        </member>
        <member name="T:SharpDisasm.Udis86.InstructionTables.OpDefs">
            <summary>
            itab entry operand definitions (for readability)
            </summary>
        </member>
        <member name="T:SharpDisasm.Udis86.reg_class">
            <summary>
            Register classes
            </summary>
        </member>
        <member name="M:SharpDisasm.Udis86.ud.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDisasm.Udis86.ud"/> class.
            </summary>
        </member>
        <member name="T:SharpDisasm.Udis86.udis86">
            <summary>
            <para>The C# udis86 library ported from C.</para>
            <para>For more information about how to use the C-based library see the udis86 project on GitHub https://github.com/vmt/udis86 </para>
            <para>This static class is thread safe ONLY WHEN using separate <see cref="T:SharpDisasm.Udis86.ud"/> instances.</para>
            </summary>
            <remarks>This class is deliberately written to match as closely as possible to the original C-library.</remarks>
        </member>
        <member name="M:SharpDisasm.Udis86.udis86.ud_init(SharpDisasm.Udis86.ud@)">
            <summary>
            Initializes ud_t object.
            </summary>
            <param name="u"></param>
        </member>
        <member name="M:SharpDisasm.Udis86.udis86.ud_disassemble(SharpDisasm.Udis86.ud@)">
            <summary>
            Disassembles one instruction and returns the number of bytes disassembled. A zero means end of disassembly.
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDisasm.Udis86.udis86.ud_set_mode(SharpDisasm.Udis86.ud@,System.Byte)">
            <summary>
            Set Disassembly mode
            </summary>
            <param name="u"></param>
            <param name="m"></param>
        </member>
        <member name="M:SharpDisasm.Udis86.udis86.ud_set_vendor(SharpDisasm.Udis86.ud@,System.Int32)">
            <summary>
            Set vendor.
            </summary>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:SharpDisasm.Udis86.udis86.ud_set_pc(SharpDisasm.Udis86.ud@,System.UInt64)">
            <summary>
            Set code origin address
            </summary>
            <param name="u"></param>
            <param name="o"></param>
        </member>
        <member name="M:SharpDisasm.Udis86.udis86.ud_set_syntax(SharpDisasm.Udis86.ud@,SharpDisasm.Udis86.UdTranslatorDelegate)">
            <summary>
            Sets the output syntax
            </summary>
            <param name="u"></param>
            <param name="t"></param>
        </member>
        <member name="M:SharpDisasm.Udis86.udis86.ud_insn_asm(SharpDisasm.Udis86.ud@)">
            <summary>
            returns the disassembled instruction
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDisasm.Udis86.udis86.ud_insn_ptr(SharpDisasm.Udis86.ud@)">
            <summary>
            Returns a pointer to buffer containing the bytes that were disassembled.
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDisasm.Udis86.udis86.ud_insn_len(SharpDisasm.Udis86.ud@)">
            <summary>
            Returns the count of bytes disassembled.
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDisasm.Udis86.udis86.ud_insn_opr(SharpDisasm.Udis86.ud@,System.Int32,System.Nullable{SharpDisasm.Udis86.ud_operand}@)">
            <summary>
            Return the operand struct representing the nth operand of
            the currently disassembled instruction. Returns NULL if
            there's no such operand.
            </summary>
            <param name="u"></param>
            <param name="n"></param>
            <param name="op"></param>
        </member>
        <member name="M:SharpDisasm.Udis86.udis86.ud_opr_is_sreg(SharpDisasm.Udis86.ud_operand@)">
            <summary>
            Returns true if the given operand is of a segment register type.
            </summary>
            <param name="opr"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDisasm.Udis86.udis86.ud_opr_is_gpr(SharpDisasm.Udis86.ud_operand@)">
            <summary>
            Returns true if the given operand is of a general purpose
            register type.
            </summary>
            <param name="opr"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDisasm.Udis86.udis86.ud_lookup_mnemonic(SharpDisasm.Udis86.ud_mnemonic_code)">
            <summary>
            Looks up mnemonic code in the mnemonic string table.
            Returns NULL if the mnemonic code is invalid.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDisasm.Udis86.udis86.ud_set_input_buffer(SharpDisasm.Udis86.ud@,SharpDisasm.Helpers.IAssemblyCode)">
            <summary>
            Set the buffer as input
            </summary>
            <param name="u">The u.</param>
            <param name="code">The code.</param>
        </member>
        <member name="M:SharpDisasm.Udis86.udis86.ud_set_input_file(SharpDisasm.Udis86.ud@,System.IO.FileStream)">
            <summary>
            Set file as input for disassembly.
            </summary>
            <param name="u"></param>
            <param name="file">File stream that will be read from. The stream must support reading.</param>
        </member>
        <member name="T:SharpDisasm.Udis86.ud_itab_entry">
            <summary>
            A single entry within an instruction table
            </summary>
        </member>
        <member name="T:SharpDisasm.Udis86.ud_itab_entry_operand">
            <summary>
            A single operand of an entry within the instruction table
            </summary>
        </member>
        <member name="T:SharpDisasm.Udis86.ud_operand">
            <summary>
            Disassembled instruction Operand.
            </summary>
        </member>
        <member name="F:SharpDisasm.Udis86.ud_operand.offset">
            <summary>
            Offset size (8, 16, 32, 64)
            </summary>
        </member>
        <member name="T:SharpDisasm.Udis86.ud_operand_code">
            <summary>
            Operand codes
            </summary>
        </member>
        <member name="T:SharpDisasm.Udis86.ud_operand_size">
            <summary>
            Operand size constants
            </summary>
        </member>
        <member name="T:SharpDisasm.Udis86.ud_type">
            <summary>
            All possible "types" of objects in udis86. Order is Important!
            </summary>
        </member>
        <member name="T:SharpDisasm.Vendor">
            <summary>
            Allows control over which vendor instructions should be disassembled
            </summary>
        </member>
        <member name="F:SharpDisasm.Vendor.AMD">
            <summary>
            Allow AMD instructions
            </summary>
        </member>
        <member name="F:SharpDisasm.Vendor.Intel">
            <summary>
            Allow Intel instructions
            </summary>
        </member>
        <member name="F:SharpDisasm.Vendor.Any">
            <summary>
            Allow both AMD and Intel instructions
            </summary>
        </member>
    </members>
</doc>
