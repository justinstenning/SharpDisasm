<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net45;net4;net35</TargetFrameworks>
    <OutputPath>..\bin\$(Configuration)\</OutputPath>
  </PropertyGroup>

  <PropertyGroup>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Company />
    <Authors>Justin Stenning</Authors>
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>SharpDisasm.snk</AssemblyOriginatorKeyFile>
    <Copyright>Copyright (c) 2018 Justin Stenning</Copyright>
    <PackageLicenseUrl>https://github.com/spazzarama/SharpDisasm/blob/master/LICENSE.md</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/spazzarama/SharpDisasm</PackageProjectUrl>
    <RepositoryUrl>https://github.com/spazzarama/SharpDisasm</RepositoryUrl>
    <Description>SharpDisam is a disassembler written in C# able to decode the x86 and x86-64 instruction set architectures.

It features:
 * a full C# port of the libudis86 C library
 * a set of simple C# classes wrapping the udis86 API
 * support for x86 16-bit, 32-bit and 64-bit instruction set architectures
 * support for outputting in Intel and AT&amp;T syntax
 * support for all x86 and x86-64 (AMD64) General purpose and System instructions.
 * support for the following ISA extensions:
   - MMX, FPU (x87), AMD 3DNow
   - SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AES,
   - AMD-V, INTEL-VMX, SMX
 * instructions are defined in an XML document that is consumed by a T4 template to generate opcode tables for performance.
 * the XML instructions document is exactly the same as that found within the udis86 project. The generated C# opcode tables is also very similar except in syntax to those generated by the Python script in the libudis86 C-library.
 * able to decode more than 4 million 64-bit instructions per second (with an average instruction size of 7-bytes)
 
Usage: https://github.com/spazzarama/SharpDisasm or http://sharpdisasm.codeplex.com/documentation</Description>
    <RepositoryType>Git</RepositoryType>
    <PackageTags>ASM disassembler x86 x86-64 instructions opcodes decoder AMD Intel</PackageTags>
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
    <PackageReleaseNotes>
1. Added ability to resolve RIP relative addresses in ASM outputting
2. 64-bit definition fixes for a number of instructions
3. Support for .NET Standard target
    
1.1.9
1. Added support for offset into IAssemblyCode
2. Fix exceptions on invalid instructions (contributed by ste-art)
3. Fix ATT syntax for enter/bound mnemonics being dropped
4. Translator internals refactored (better code reuse)
5. A few Debug.Asserts replaced with exceptions for Translator and Instruction.ToString
1.1.5
1. Use of unsafe replaced with an assembly code reader interface
1.0.2
1. Full port of udis86 C-library into C#
2. Wrapper class Disassembler for those not familiar with the libudis86 C-library</PackageReleaseNotes>
  </PropertyGroup>

  <ItemGroup>
    <None Update="Udis86\OpTable.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>OpTable.cs</LastGenOutput>
    </None>
  </ItemGroup>

  <ItemGroup>
    <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Udis86\OpTable.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>OpTable.tt</DependentUpon>
    </Compile>
  </ItemGroup>

</Project>
